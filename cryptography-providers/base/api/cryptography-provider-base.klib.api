// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: native => [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: apple => [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <dev.whyoleg.cryptography:cryptography-provider-base>
abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedCipher : dev.whyoleg.cryptography.operations/AuthenticatedCipher, dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor, dev.whyoleg.cryptography.providers.base.operations/BaseCipher // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedCipher|null[0]

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor : dev.whyoleg.cryptography.operations/AuthenticatedDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor|null[0]
    abstract fun createDecryptFunction(kotlin/ByteArray?): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.createDecryptFunction|createDecryptFunction(kotlin.ByteArray?){}[0]
    open fun createDecryptFunction(): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.createDecryptFunction|createDecryptFunction(){}[0]
    open fun decryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray){}[0]
    open fun decryptBlocking(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun decryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink){}[0]
    open fun decryptingSink(kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    open fun decryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource){}[0]
    open fun decryptingSource(kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor : dev.whyoleg.cryptography.operations/AuthenticatedEncryptor, dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor|null[0]
    abstract fun createEncryptFunction(kotlin/ByteArray?): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.createEncryptFunction|createEncryptFunction(kotlin.ByteArray?){}[0]
    open fun createEncryptFunction(): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.createEncryptFunction|createEncryptFunction(){}[0]
    open fun encryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray){}[0]
    open fun encryptBlocking(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun encryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink){}[0]
    open fun encryptingSink(kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    open fun encryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource){}[0]
    open fun encryptingSource(kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseCipher : dev.whyoleg.cryptography.operations/Cipher, dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor // dev.whyoleg.cryptography.providers.base.operations/BaseCipher|null[0]

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor : dev.whyoleg.cryptography.operations/Decryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor|null[0]
    abstract fun createDecryptFunction(): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor.createDecryptFunction|createDecryptFunction(){}[0]
    open fun decryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray){}[0]
    open fun decryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink){}[0]
    open fun decryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor : dev.whyoleg.cryptography.operations/Encryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor|null[0]
    abstract fun createEncryptFunction(): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor.createEncryptFunction|createEncryptFunction(){}[0]
    open fun encryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray){}[0]
    open fun encryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink){}[0]
    open fun encryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedCipher : dev.whyoleg.cryptography.operations/IvAuthenticatedCipher, dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedCipher, dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedCipher|null[0]

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor : dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedDecryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor|null[0]
    abstract fun createDecryptFunctionWithIv(kotlin/ByteArray, kotlin/ByteArray?): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor.createDecryptFunctionWithIv|createDecryptFunctionWithIv(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun decryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun decryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    open fun decryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor : dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor, dev.whyoleg.cryptography.providers.base.operations/BaseAuthenticatedEncryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor|null[0]
    abstract fun createEncryptFunctionWithIv(kotlin/ByteArray, kotlin/ByteArray?): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor.createEncryptFunctionWithIv|createEncryptFunctionWithIv(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun encryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open fun encryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    open fun encryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseIvAuthenticatedEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvCipher : dev.whyoleg.cryptography.operations/IvCipher, dev.whyoleg.cryptography.providers.base.operations/BaseCipher, dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor // dev.whyoleg.cryptography.providers.base.operations/BaseIvCipher|null[0]

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor : dev.whyoleg.cryptography.operations/IvDecryptor, dev.whyoleg.cryptography.providers.base.operations/BaseDecryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor|null[0]
    abstract fun createDecryptFunctionWithIv(kotlin/ByteArray): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor.createDecryptFunctionWithIv|createDecryptFunctionWithIv(kotlin.ByteArray){}[0]
    open fun decryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun decryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    open fun decryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseIvDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor : dev.whyoleg.cryptography.operations/IvEncryptor, dev.whyoleg.cryptography.providers.base.operations/BaseEncryptor { // dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor|null[0]
    abstract fun createEncryptFunctionWithIv(kotlin/ByteArray): dev.whyoleg.cryptography.providers.base.operations/CipherFunction // dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor.createEncryptFunctionWithIv|createEncryptFunctionWithIv(kotlin.ByteArray){}[0]
    open fun encryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun encryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    open fun encryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseIvEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.providers.base.operations/CipherFunction { // dev.whyoleg.cryptography.providers.base.operations/CipherFunction|null[0]
    abstract fun transform(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/CipherFunction.transform|transform(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    abstract fun transformedSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/CipherFunction.transformedSink|transformedSink(kotlinx.io.RawSink){}[0]
    abstract fun transformedSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/CipherFunction.transformedSource|transformedSource(kotlinx.io.RawSource){}[0]
}

abstract class dev.whyoleg.cryptography.providers.base.algorithms/BaseHkdf : dev.whyoleg.cryptography.algorithms/HKDF { // dev.whyoleg.cryptography.providers.base.algorithms/BaseHkdf|null[0]
    constructor <init>(dev.whyoleg.cryptography/CryptographyProvider) // dev.whyoleg.cryptography.providers.base.algorithms/BaseHkdf.<init>|<init>(dev.whyoleg.cryptography.CryptographyProvider){}[0]

    abstract fun digestSize(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>): kotlin/Int // dev.whyoleg.cryptography.providers.base.algorithms/BaseHkdf.digestSize|digestSize(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>){}[0]
    open fun secretDerivation(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, dev.whyoleg.cryptography/BinarySize, kotlin/ByteArray?, kotlin/ByteArray?): dev.whyoleg.cryptography.operations/SecretDerivation // dev.whyoleg.cryptography.providers.base.algorithms/BaseHkdf.secretDerivation|secretDerivation(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.BinarySize;kotlin.ByteArray?;kotlin.ByteArray?){}[0]
}

abstract class dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction : dev.whyoleg.cryptography.providers.base.operations/CipherFunction, kotlin/AutoCloseable { // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction|null[0]
    constructor <init>() // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.<init>|<init>(){}[0]

    abstract val blockSize // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.blockSize|{}blockSize[0]
        abstract fun <get-blockSize>(): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.blockSize.<get-blockSize>|<get-blockSize>(){}[0]

    abstract fun finalizeIntoByteArray(kotlin/ByteArray, kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.finalizeIntoByteArray|finalizeIntoByteArray(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun maxOutputSize(kotlin/Int): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.maxOutputSize|maxOutputSize(kotlin.Int){}[0]
    abstract fun transformIntoByteArray(kotlin/ByteArray, kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformIntoByteArray|transformIntoByteArray(kotlin.ByteArray;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    open fun finalizeToByteArray(): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.finalizeToByteArray|finalizeToByteArray(){}[0]
    open fun maxInputSize(kotlin/Int, kotlin/Int): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.maxInputSize|maxInputSize(kotlin.Int;kotlin.Int){}[0]
    open fun transform(kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transform|transform(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun transformAndFinalizeIntoByteArray(kotlin/ByteArray, kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformAndFinalizeIntoByteArray|transformAndFinalizeIntoByteArray(kotlin.ByteArray;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    open fun transformAndFinalizeToByteArray(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformAndFinalizeToByteArray|transformAndFinalizeToByteArray(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun transformToByteArray(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformToByteArray|transformToByteArray(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun transformedSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformedSink|transformedSink(kotlinx.io.RawSink){}[0]
    open fun transformedSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction.transformedSource|transformedSource(kotlinx.io.RawSource){}[0]
}

final class dev.whyoleg.cryptography.providers.base.operations/AccumulatingCipherFunction : dev.whyoleg.cryptography.providers.base.operations/BaseCipherFunction { // dev.whyoleg.cryptography.providers.base.operations/AccumulatingCipherFunction|null[0]
    constructor <init>(kotlin/Function1<kotlin/ByteArray, kotlin/ByteArray>) // dev.whyoleg.cryptography.providers.base.operations/AccumulatingCipherFunction.<init>|<init>(kotlin.Function1<kotlin.ByteArray,kotlin.ByteArray>){}[0]

    final fun close() // dev.whyoleg.cryptography.providers.base.operations/AccumulatingCipherFunction.close|close(){}[0]
}

final class dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction : dev.whyoleg.cryptography.providers.base.operations/CipherFunction { // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction|null[0]
    constructor <init>(kotlin/Int, kotlin/Function2<kotlin/ByteArray, kotlin/Int, dev.whyoleg.cryptography.providers.base.operations/CipherFunction>) // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction.<init>|<init>(kotlin.Int;kotlin.Function2<kotlin.ByteArray,kotlin.Int,dev.whyoleg.cryptography.providers.base.operations.CipherFunction>){}[0]

    final fun transform(kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction.transform|transform(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun transformedSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction.transformedSink|transformedSink(kotlinx.io.RawSink){}[0]
    final fun transformedSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvDecryptFunction.transformedSource|transformedSource(kotlinx.io.RawSource){}[0]
}

final class dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction : dev.whyoleg.cryptography.providers.base.operations/CipherFunction { // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction|null[0]
    constructor <init>(kotlin/ByteArray, dev.whyoleg.cryptography.providers.base.operations/CipherFunction) // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction.<init>|<init>(kotlin.ByteArray;dev.whyoleg.cryptography.providers.base.operations.CipherFunction){}[0]

    final fun transform(kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction.transform|transform(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun transformedSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction.transformedSink|transformedSink(kotlinx.io.RawSink){}[0]
    final fun transformedSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.providers.base.operations/BaseImplicitIvEncryptFunction.transformedSource|transformedSource(kotlinx.io.RawSource){}[0]
}

final val dev.whyoleg.cryptography.providers.base/EmptyByteArray // dev.whyoleg.cryptography.providers.base/EmptyByteArray|{}EmptyByteArray[0]
    final fun <get-EmptyByteArray>(): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base/EmptyByteArray.<get-EmptyByteArray>|<get-EmptyByteArray>(){}[0]

final fun (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/ensureSizeExactly(kotlin/Int): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base/ensureSizeExactly|ensureSizeExactly@kotlin.ByteArray(kotlin.Int){}[0]
final fun dev.whyoleg.cryptography.providers.base.algorithms/convertEcPrivateKeyFromPkcs8ToSec1(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.algorithms/convertEcPrivateKeyFromPkcs8ToSec1|convertEcPrivateKeyFromPkcs8ToSec1(kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.algorithms/convertEcPrivateKeyFromSec1ToPkcs8(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.algorithms/convertEcPrivateKeyFromSec1ToPkcs8|convertEcPrivateKeyFromSec1ToPkcs8(kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/unwrapPem(dev.whyoleg.cryptography.serialization.pem/PemLabel, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/unwrapPem|unwrapPem(dev.whyoleg.cryptography.serialization.pem.PemLabel;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/unwrapPrivateKeyInfo(dev.whyoleg.cryptography.serialization.asn1/ObjectIdentifier, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/unwrapPrivateKeyInfo|unwrapPrivateKeyInfo(dev.whyoleg.cryptography.serialization.asn1.ObjectIdentifier;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/unwrapSubjectPublicKeyInfo(dev.whyoleg.cryptography.serialization.asn1/ObjectIdentifier, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/unwrapSubjectPublicKeyInfo|unwrapSubjectPublicKeyInfo(dev.whyoleg.cryptography.serialization.asn1.ObjectIdentifier;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/wrapPem(dev.whyoleg.cryptography.serialization.pem/PemLabel, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/wrapPem|wrapPem(dev.whyoleg.cryptography.serialization.pem.PemLabel;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/wrapPrivateKeyInfo(kotlin/Int, dev.whyoleg.cryptography.serialization.asn1.modules/KeyAlgorithmIdentifier, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/wrapPrivateKeyInfo|wrapPrivateKeyInfo(kotlin.Int;dev.whyoleg.cryptography.serialization.asn1.modules.KeyAlgorithmIdentifier;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base.materials/wrapSubjectPublicKeyInfo(dev.whyoleg.cryptography.serialization.asn1.modules/KeyAlgorithmIdentifier, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base.materials/wrapSubjectPublicKeyInfo|wrapSubjectPublicKeyInfo(dev.whyoleg.cryptography.serialization.asn1.modules.KeyAlgorithmIdentifier;kotlin.ByteArray){}[0]
final fun dev.whyoleg.cryptography.providers.base/checkBounds(kotlin/Int, kotlin/Int, kotlin/Int) // dev.whyoleg.cryptography.providers.base/checkBounds|checkBounds(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/refToU(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // dev.whyoleg.cryptography.providers.base/refToU|refToU@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/safeRefTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // dev.whyoleg.cryptography.providers.base/safeRefTo|safeRefTo@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/safeRefToU(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // dev.whyoleg.cryptography.providers.base/safeRefToU|safeRefToU@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/ByteArray>).dev.whyoleg.cryptography.providers.base/safeAddressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // dev.whyoleg.cryptography.providers.base/safeAddressOf|safeAddressOf@kotlinx.cinterop.Pinned<kotlin.ByteArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/ByteArray>).dev.whyoleg.cryptography.providers.base/safeAddressOfU(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // dev.whyoleg.cryptography.providers.base/safeAddressOfU|safeAddressOfU@kotlinx.cinterop.Pinned<kotlin.ByteArray>(kotlin.Int){}[0]

// Targets: [apple]
final fun (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/toNSData(): platform.Foundation/NSData // dev.whyoleg.cryptography.providers.base/toNSData|toNSData@kotlin.ByteArray(){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSData).dev.whyoleg.cryptography.providers.base/getIntoByteArray(kotlin/ByteArray, kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.providers.base/getIntoByteArray|getIntoByteArray@platform.Foundation.NSData(kotlin.ByteArray;kotlin.Int){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSData).dev.whyoleg.cryptography.providers.base/toByteArray(): kotlin/ByteArray // dev.whyoleg.cryptography.providers.base/toByteArray|toByteArray@platform.Foundation.NSData(){}[0]

// Targets: [apple]
final fun <#A: kotlin/Any?> (kotlin/ByteArray).dev.whyoleg.cryptography.providers.base/useNSData(kotlin/Int = ..., kotlin/Int = ..., kotlin/Function1<platform.Foundation/NSData, #A>): #A // dev.whyoleg.cryptography.providers.base/useNSData|useNSData@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Function1<platform.Foundation.NSData,0:0>){0§<kotlin.Any?>}[0]
