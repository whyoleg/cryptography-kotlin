name: Run tests on all platforms
on:
  workflow_call:
    inputs:
      kotlin-version:
        description: Override Kotlin version
        type: string
      kotlin-use-k2:
        description: Use or not K2
        type: string
        default: 'false'
      cache-disabled:
        description: When 'true', all caching is disabled. No entries will be written to or read from the cache.
        type: boolean
        default: false
      patch-file:
        description: Path to git patch to apply
        type: string
      configuration-cache-enabled:
        description: When `true`, will use configuration cache
        type: boolean
        default: false
      run-compatibility-tests:
        description: When `true`, will run compatibility tests
        type: boolean
        default: true

  workflow_dispatch:
    inputs:
      kotlin-version:
        description: Override Kotlin version
        type: string
      kotlin-use-k2:
        description: Use or not K2
        type: string
        default: 'false'
      cache-disabled:
        description: When 'true', all caching is disabled. No entries will be written to or read from the cache.
        type: boolean
        default: false
      patch-file:
        description: Path to git patch to apply
        type: string
      configuration-cache-enabled:
        description: When `true`, will use configuration cache
        type: boolean
        default: false
      run-compatibility-tests:
        description: When `true`, will run compatibility tests
        type: boolean
        default: true

jobs:
  default-test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
    steps:
      - uses: actions/checkout@v3
      - run: git apply ${{ inputs.patch-file }}
        if: inputs.patch-file != ''
      - uses: ./.github/actions/setup-gradle
        with:
          cache-disabled: ${{ inputs.cache-disabled }}

      - id: configuration-cache
        if: ${{ inputs.configuration-cache-enabled }}
        run: echo "ARGS=--configuration-cache" >> $GITHUB_OUTPUT

      - if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          release: false
          install: mingw-w64-x86_64-openssl

      - name: Run tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            check 
            --scan
            --continue
            -Pkotlin.experimental.tryK2=${{ inputs.kotlin-use-k2 }}
            -PuseKotlin=${{ inputs.kotlin-version }}
            ${{ steps.configuration-cache.outputs.ARGS }}"

  compatibility-generate:
    if: ${{ inputs.run-compatibility-tests }}
    name: "Compatibility tests: Generate"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
    steps:
      - uses: actions/checkout@v3
      - run: git apply ${{ inputs.patch-file }}
        if: inputs.patch-file != ''
      - uses: ./.github/actions/setup-gradle
        with:
          cache-disabled: ${{ inputs.cache-disabled }}
          cache-read-only: true

      - id: configuration-cache
        if: ${{ inputs.configuration-cache-enabled }}
        run: echo "ARGS=--configuration-cache" >> $GITHUB_OUTPUT

      - name: Run tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            cryptography-providers-tests-compatibility:allTests
            -Ptests.compatibility.step=Generate
            -Ptesttool.instanceId=${{ matrix.os }}
            --scan
            --continue
            -Pkotlin.experimental.tryK2=${{ inputs.kotlin-use-k2 }}
            -PuseKotlin=${{ inputs.kotlin-version }}
            ${{ steps.configuration-cache.outputs.ARGS }}"

      - name: ZIP test-tool-storage (windows)
        if: ${{ always() && matrix.os == 'windows-latest' }}
        run: Compress-Archive build/test-tool-storage compatibility-tests-data.zip
      - name: ZIP test-tool-storage (unix)
        if: ${{ always() && matrix.os != 'windows-latest' }}
        run: zip -r compatibility-tests-data.zip build/test-tool-storage
      - name: Upload test-tool-storage ZIP
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: compatibility-tests-data-${{ matrix.os }}
          path: compatibility-tests-data.zip
          if-no-files-found: error

  compatibility-validate:
    needs: [ compatibility-generate ]
    name: "Compatibility tests: Validate"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        fromOS: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
    steps:
      - uses: actions/checkout@v3
      - run: git apply ${{ inputs.patch-file }}
        if: inputs.patch-file != ''
      - uses: ./.github/actions/setup-gradle
        with:
          cache-disabled: ${{ inputs.cache-disabled }}
          cache-read-only: true

      - id: configuration-cache
        if: ${{ inputs.configuration-cache-enabled }}
        run: echo "ARGS=--configuration-cache" >> $GITHUB_OUTPUT

      - name: Download test-tool-storage ZIP
        uses: actions/download-artifact@v3
        with:
          name: compatibility-tests-data-${{ matrix.fromOS }}
          path: compatibility-tests-data
      - name: UNZIP test-tool-storage (windows (from windows))
        if: ${{ matrix.os == 'windows-latest' && matrix.fromOS == 'windows-latest' }}
        run: Expand-Archive compatibility-tests-data/compatibility-tests-data.zip -DestinationPath build
      - name: UNZIP test-tool-storage (windows (from unix))
        if: ${{ matrix.os == 'windows-latest' && matrix.fromOS != 'windows-latest' }}
        run: Expand-Archive compatibility-tests-data/compatibility-tests-data.zip -DestinationPath .
      - name: UNZIP test-tool-storage (unix (from windows))
        if: ${{ matrix.os != 'windows-latest' && matrix.fromOS == 'windows-latest' }}
        run: unzip compatibility-tests-data/compatibility-tests-data.zip -d build
      - name: UNZIP test-tool-storage (unix (from unix))
        if: ${{ matrix.os != 'windows-latest' && matrix.fromOS != 'windows-latest' }}
        run: unzip compatibility-tests-data/compatibility-tests-data.zip

      - name: Display structure of test-tool-storage
        run: ls -R
        working-directory: build/test-tool-storage

      - name: Run tests (unix)
        if: matrix.os != 'windows-latest'
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            cryptography-providers-tests-compatibility:allTests
            -Ptests.compatibility.step=Validate
            -Ptesttool.instanceId=${{ matrix.os }}
            --scan
            --continue
            -Pkotlin.experimental.tryK2=${{ inputs.kotlin-use-k2 }}
            -PuseKotlin=${{ inputs.kotlin-version }}
            ${{ steps.configuration-cache.outputs.ARGS }}"
      # for windows, we skip jsNodeTest task, because for some reason it timeouts
      - name: Run tests (windows)
        if: matrix.os == 'windows-latest'
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            cryptography-providers-tests-compatibility:allTests
            -Ptests.compatibility.step=Validate
            -Ptesttool.instanceId=${{ matrix.os }}
            --scan
            --continue
            --exclude-task
            jsNodeTest
            -Pkotlin.experimental.tryK2=${{ inputs.kotlin-use-k2 }}
            -PuseKotlin=${{ inputs.kotlin-version }}
            ${{ steps.configuration-cache.outputs.ARGS }}"

  build-project:
    name: Build project
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
    steps:
      - uses: actions/checkout@v3
      - run: git apply ${{ inputs.patch-file }}
        if: inputs.patch-file != ''
      - uses: ./.github/actions/setup-gradle
        with:
          cache-disabled: ${{ inputs.cache-disabled }}

      - id: configuration-cache
        if: ${{ inputs.configuration-cache-enabled }}
        run: echo "ARGS=--configuration-cache" >> $GITHUB_OUTPUT

      - if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          release: false
          install: mingw-w64-x86_64-openssl

      - name: Run build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            build
            publishToMavenLocal
            --scan
            --continue
            -Pskip.test
            -Pkotlin.experimental.tryK2=${{ inputs.kotlin-use-k2 }}
            -PuseKotlin=${{ inputs.kotlin-version }}
            ${{ steps.configuration-cache.outputs.ARGS }}"
