// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <dev.whyoleg.cryptography:cryptography-core>
open annotation class dev.whyoleg.cryptography/CryptographyProviderApi : kotlin/Annotation { // dev.whyoleg.cryptography/CryptographyProviderApi|null[0]
    constructor <init>() // dev.whyoleg.cryptography/CryptographyProviderApi.<init>|<init>(){}[0]
}

open annotation class dev.whyoleg.cryptography/DelicateCryptographyApi : kotlin/Annotation { // dev.whyoleg.cryptography/DelicateCryptographyApi|null[0]
    constructor <init>() // dev.whyoleg.cryptography/DelicateCryptographyApi.<init>|<init>(){}[0]
}

abstract interface <#A: dev.whyoleg.cryptography.algorithms/AES.Key> dev.whyoleg.cryptography.algorithms/AES : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/AES|null[0]
    abstract fun keyDecoder(): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/AES.Key.Format, #A> // dev.whyoleg.cryptography.algorithms/AES.keyDecoder|keyDecoder(){}[0]
    abstract fun keyGenerator(dev.whyoleg.cryptography/BinarySize = ...): dev.whyoleg.cryptography.materials.key/KeyGenerator<#A> // dev.whyoleg.cryptography.algorithms/AES.keyGenerator|keyGenerator(dev.whyoleg.cryptography.BinarySize){}[0]
    open fun keyGenerator(dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize): dev.whyoleg.cryptography.materials.key/KeyGenerator<#A> // dev.whyoleg.cryptography.algorithms/AES.keyGenerator|keyGenerator(dev.whyoleg.cryptography.algorithms.symmetric.SymmetricKeySize){}[0]

    abstract interface CBC : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.CBC.Key> { // dev.whyoleg.cryptography.algorithms/AES.CBC|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.CBC.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CBC> // dev.whyoleg.cryptography.algorithms/AES.CBC.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.CBC.Key|null[0]
            abstract fun cipher(kotlin/Boolean = ...): dev.whyoleg.cryptography.operations/IvCipher // dev.whyoleg.cryptography.algorithms/AES.CBC.Key.cipher|cipher(kotlin.Boolean){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CBC> // dev.whyoleg.cryptography.algorithms/AES.CBC.Companion|null[0]
    }

    abstract interface CFB : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.CFB.Key> { // dev.whyoleg.cryptography.algorithms/AES.CFB|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.CFB.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CFB> // dev.whyoleg.cryptography.algorithms/AES.CFB.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.CFB.Key|null[0]
            abstract fun cipher(): dev.whyoleg.cryptography.operations/IvCipher // dev.whyoleg.cryptography.algorithms/AES.CFB.Key.cipher|cipher(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CFB> // dev.whyoleg.cryptography.algorithms/AES.CFB.Companion|null[0]
    }

    abstract interface CMAC : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.CMAC.Key> { // dev.whyoleg.cryptography.algorithms/AES.CMAC|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.CMAC.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CMAC> // dev.whyoleg.cryptography.algorithms/AES.CMAC.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.CMAC.Key|null[0]
            abstract fun signatureGenerator(): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/AES.CMAC.Key.signatureGenerator|signatureGenerator(){}[0]
            abstract fun signatureVerifier(): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/AES.CMAC.Key.signatureVerifier|signatureVerifier(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CMAC> // dev.whyoleg.cryptography.algorithms/AES.CMAC.Companion|null[0]
    }

    abstract interface CTR : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.CTR.Key> { // dev.whyoleg.cryptography.algorithms/AES.CTR|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.CTR.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CTR> // dev.whyoleg.cryptography.algorithms/AES.CTR.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.CTR.Key|null[0]
            abstract fun cipher(): dev.whyoleg.cryptography.operations/IvCipher // dev.whyoleg.cryptography.algorithms/AES.CTR.Key.cipher|cipher(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.CTR> // dev.whyoleg.cryptography.algorithms/AES.CTR.Companion|null[0]
    }

    abstract interface ECB : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.ECB.Key> { // dev.whyoleg.cryptography.algorithms/AES.ECB|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.ECB.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.ECB> // dev.whyoleg.cryptography.algorithms/AES.ECB.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.ECB.Key|null[0]
            abstract fun cipher(kotlin/Boolean = ...): dev.whyoleg.cryptography.operations/Cipher // dev.whyoleg.cryptography.algorithms/AES.ECB.Key.cipher|cipher(kotlin.Boolean){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.ECB> // dev.whyoleg.cryptography.algorithms/AES.ECB.Companion|null[0]
    }

    abstract interface GCM : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.GCM.Key> { // dev.whyoleg.cryptography.algorithms/AES.GCM|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.GCM.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.GCM> // dev.whyoleg.cryptography.algorithms/AES.GCM.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.GCM.Key|null[0]
            abstract fun cipher(dev.whyoleg.cryptography/BinarySize = ...): dev.whyoleg.cryptography.operations/IvAuthenticatedCipher // dev.whyoleg.cryptography.algorithms/AES.GCM.Key.cipher|cipher(dev.whyoleg.cryptography.BinarySize){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.GCM> // dev.whyoleg.cryptography.algorithms/AES.GCM.Companion|null[0]
    }

    abstract interface Key : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/AES.Key.Format> { // dev.whyoleg.cryptography.algorithms/AES.Key|null[0]
        final enum class Format : dev.whyoleg.cryptography.materials.key/KeyFormat, kotlin/Enum<dev.whyoleg.cryptography.algorithms/AES.Key.Format> { // dev.whyoleg.cryptography.algorithms/AES.Key.Format|null[0]
            enum entry JWK // dev.whyoleg.cryptography.algorithms/AES.Key.Format.JWK|null[0]
            enum entry RAW // dev.whyoleg.cryptography.algorithms/AES.Key.Format.RAW|null[0]

            final val entries // dev.whyoleg.cryptography.algorithms/AES.Key.Format.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<dev.whyoleg.cryptography.algorithms/AES.Key.Format> // dev.whyoleg.cryptography.algorithms/AES.Key.Format.entries.<get-entries>|<get-entries>#static(){}[0]

            final fun valueOf(kotlin/String): dev.whyoleg.cryptography.algorithms/AES.Key.Format // dev.whyoleg.cryptography.algorithms/AES.Key.Format.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<dev.whyoleg.cryptography.algorithms/AES.Key.Format> // dev.whyoleg.cryptography.algorithms/AES.Key.Format.values|values#static(){}[0]
        }

        final object Size { // dev.whyoleg.cryptography.algorithms/AES.Key.Size|null[0]
            final val B128 // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B128|{}B128[0]
                final fun <get-B128>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B128.<get-B128>|<get-B128>(){}[0]
            final val B192 // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B192|{}B192[0]
                final fun <get-B192>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B192.<get-B192>|<get-B192>(){}[0]
            final val B256 // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B256|{}B256[0]
                final fun <get-B256>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography.algorithms/AES.Key.Size.B256.<get-B256>|<get-B256>(){}[0]
        }
    }

    abstract interface OFB : dev.whyoleg.cryptography.algorithms/AES<dev.whyoleg.cryptography.algorithms/AES.OFB.Key> { // dev.whyoleg.cryptography.algorithms/AES.OFB|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/AES.OFB.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.OFB> // dev.whyoleg.cryptography.algorithms/AES.OFB.id.<get-id>|<get-id>(){}[0]

        abstract interface Key : dev.whyoleg.cryptography.algorithms/AES.Key { // dev.whyoleg.cryptography.algorithms/AES.OFB.Key|null[0]
            abstract fun cipher(): dev.whyoleg.cryptography.operations/IvCipher // dev.whyoleg.cryptography.algorithms/AES.OFB.Key.cipher|cipher(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/AES.OFB> // dev.whyoleg.cryptography.algorithms/AES.OFB.Companion|null[0]
    }
}

abstract interface <#A: dev.whyoleg.cryptography.algorithms/EC.PublicKey, #B: dev.whyoleg.cryptography.algorithms/EC.PrivateKey, #C: dev.whyoleg.cryptography.algorithms/EC.KeyPair<#A, #B>> dev.whyoleg.cryptography.algorithms/EC : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/EC|null[0]
    abstract fun keyPairGenerator(dev.whyoleg.cryptography.algorithms/EC.Curve): dev.whyoleg.cryptography.materials.key/KeyGenerator<#C> // dev.whyoleg.cryptography.algorithms/EC.keyPairGenerator|keyPairGenerator(dev.whyoleg.cryptography.algorithms.EC.Curve){}[0]
    abstract fun privateKeyDecoder(dev.whyoleg.cryptography.algorithms/EC.Curve): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format, #B> // dev.whyoleg.cryptography.algorithms/EC.privateKeyDecoder|privateKeyDecoder(dev.whyoleg.cryptography.algorithms.EC.Curve){}[0]
    abstract fun publicKeyDecoder(dev.whyoleg.cryptography.algorithms/EC.Curve): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format, #A> // dev.whyoleg.cryptography.algorithms/EC.publicKeyDecoder|publicKeyDecoder(dev.whyoleg.cryptography.algorithms.EC.Curve){}[0]

    abstract interface <#A1: dev.whyoleg.cryptography.algorithms/EC.PublicKey, #B1: dev.whyoleg.cryptography.algorithms/EC.PrivateKey> KeyPair : dev.whyoleg.cryptography.materials.key/Key { // dev.whyoleg.cryptography.algorithms/EC.KeyPair|null[0]
        abstract val privateKey // dev.whyoleg.cryptography.algorithms/EC.KeyPair.privateKey|{}privateKey[0]
            abstract fun <get-privateKey>(): #B1 // dev.whyoleg.cryptography.algorithms/EC.KeyPair.privateKey.<get-privateKey>|<get-privateKey>(){}[0]
        abstract val publicKey // dev.whyoleg.cryptography.algorithms/EC.KeyPair.publicKey|{}publicKey[0]
            abstract fun <get-publicKey>(): #A1 // dev.whyoleg.cryptography.algorithms/EC.KeyPair.publicKey.<get-publicKey>|<get-publicKey>(){}[0]
    }

    abstract interface PrivateKey : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format> { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey|null[0]
        sealed class Format : dev.whyoleg.cryptography.materials.key/KeyFormat { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format|null[0]
            final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.toString|toString(){}[0]

            sealed class DER : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object SEC1 : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.SEC1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.SEC1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.SEC1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.SEC1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.DER.SEC1.hashCode|hashCode(){}[0]
                }
            }

            sealed class PEM : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object SEC1 : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.SEC1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.SEC1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.SEC1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.SEC1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.PEM.SEC1.hashCode|hashCode(){}[0]
                }
            }

            final object JWK : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.JWK|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.JWK.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.JWK.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.JWK.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.JWK.hashCode|hashCode(){}[0]
            }

            final object RAW : dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.RAW|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.RAW.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.RAW.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.RAW.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PrivateKey.Format.RAW.hashCode|hashCode(){}[0]
            }
        }
    }

    abstract interface PublicKey : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format> { // dev.whyoleg.cryptography.algorithms/EC.PublicKey|null[0]
        sealed class Format : dev.whyoleg.cryptography.materials.key/KeyFormat { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format|null[0]
            final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.toString|toString(){}[0]

            sealed class RAW : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW|null[0]
                final object Compressed : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Compressed|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Compressed.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Compressed.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Compressed.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Compressed.hashCode|hashCode(){}[0]
                }

                final object Uncompressed : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Uncompressed|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Uncompressed.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.RAW.Uncompressed.name.<get-name>|<get-name>(){}[0]
                }
            }

            final object DER : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.DER|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.DER.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.DER.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.DER.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.DER.hashCode|hashCode(){}[0]
            }

            final object JWK : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.JWK|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.JWK.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.JWK.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.JWK.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.JWK.hashCode|hashCode(){}[0]
            }

            final object PEM : dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.PEM|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.PEM.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.PEM.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.PEM.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.PublicKey.Format.PEM.hashCode|hashCode(){}[0]
            }
        }
    }

    final value class Curve { // dev.whyoleg.cryptography.algorithms/EC.Curve|null[0]
        constructor <init>(kotlin/String) // dev.whyoleg.cryptography.algorithms/EC.Curve.<init>|<init>(kotlin.String){}[0]

        final val name // dev.whyoleg.cryptography.algorithms/EC.Curve.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.Curve.name.<get-name>|<get-name>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/EC.Curve.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/EC.Curve.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms/EC.Curve.toString|toString(){}[0]

        final object Companion { // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion|null[0]
            final val P256 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P256|{}P256[0]
                final fun <get-P256>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P256.<get-P256>|<get-P256>(){}[0]
            final val P384 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P384|{}P384[0]
                final fun <get-P384>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P384.<get-P384>|<get-P384>(){}[0]
            final val P521 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P521|{}P521[0]
                final fun <get-P521>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.P521.<get-P521>|<get-P521>(){}[0]
            final val brainpoolP256r1 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP256r1|{}brainpoolP256r1[0]
                final fun <get-brainpoolP256r1>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP256r1.<get-brainpoolP256r1>|<get-brainpoolP256r1>(){}[0]
            final val brainpoolP384r1 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP384r1|{}brainpoolP384r1[0]
                final fun <get-brainpoolP384r1>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP384r1.<get-brainpoolP384r1>|<get-brainpoolP384r1>(){}[0]
            final val brainpoolP512r1 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP512r1|{}brainpoolP512r1[0]
                final fun <get-brainpoolP512r1>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.brainpoolP512r1.<get-brainpoolP512r1>|<get-brainpoolP512r1>(){}[0]
            final val secp256k1 // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.secp256k1|{}secp256k1[0]
                final fun <get-secp256k1>(): dev.whyoleg.cryptography.algorithms/EC.Curve // dev.whyoleg.cryptography.algorithms/EC.Curve.Companion.secp256k1.<get-secp256k1>|<get-secp256k1>(){}[0]
        }
    }
}

abstract interface <#A: dev.whyoleg.cryptography.algorithms/RSA.PublicKey, #B: dev.whyoleg.cryptography.algorithms/RSA.PrivateKey, #C: dev.whyoleg.cryptography.algorithms/RSA.KeyPair<#A, #B>> dev.whyoleg.cryptography.algorithms/RSA : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/RSA|null[0]
    abstract fun keyPairGenerator(dev.whyoleg.cryptography/BinarySize = ..., dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> = ..., dev.whyoleg.cryptography.bigint/BigInt = ...): dev.whyoleg.cryptography.materials.key/KeyGenerator<#C> // dev.whyoleg.cryptography.algorithms/RSA.keyPairGenerator|keyPairGenerator(dev.whyoleg.cryptography.BinarySize;dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.bigint.BigInt){}[0]
    abstract fun privateKeyDecoder(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format, #B> // dev.whyoleg.cryptography.algorithms/RSA.privateKeyDecoder|privateKeyDecoder(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>){}[0]
    abstract fun publicKeyDecoder(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format, #A> // dev.whyoleg.cryptography.algorithms/RSA.publicKeyDecoder|publicKeyDecoder(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>){}[0]

    abstract interface <#A1: dev.whyoleg.cryptography.algorithms/RSA.PublicKey, #B1: dev.whyoleg.cryptography.algorithms/RSA.PrivateKey> KeyPair : dev.whyoleg.cryptography.materials.key/Key { // dev.whyoleg.cryptography.algorithms/RSA.KeyPair|null[0]
        abstract val privateKey // dev.whyoleg.cryptography.algorithms/RSA.KeyPair.privateKey|{}privateKey[0]
            abstract fun <get-privateKey>(): #B1 // dev.whyoleg.cryptography.algorithms/RSA.KeyPair.privateKey.<get-privateKey>|<get-privateKey>(){}[0]
        abstract val publicKey // dev.whyoleg.cryptography.algorithms/RSA.KeyPair.publicKey|{}publicKey[0]
            abstract fun <get-publicKey>(): #A1 // dev.whyoleg.cryptography.algorithms/RSA.KeyPair.publicKey.<get-publicKey>|<get-publicKey>(){}[0]
    }

    abstract interface OAEP : dev.whyoleg.cryptography.algorithms/RSA<dev.whyoleg.cryptography.algorithms/RSA.OAEP.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.OAEP.PrivateKey, dev.whyoleg.cryptography.algorithms/RSA.OAEP.KeyPair> { // dev.whyoleg.cryptography.algorithms/RSA.OAEP|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/RSA.OAEP.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.OAEP> // dev.whyoleg.cryptography.algorithms/RSA.OAEP.id.<get-id>|<get-id>(){}[0]

        abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/RSA.KeyPair<dev.whyoleg.cryptography.algorithms/RSA.OAEP.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.OAEP.PrivateKey> // dev.whyoleg.cryptography.algorithms/RSA.OAEP.KeyPair|null[0]

        abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey { // dev.whyoleg.cryptography.algorithms/RSA.OAEP.PrivateKey|null[0]
            abstract fun decryptor(): dev.whyoleg.cryptography.operations/AuthenticatedDecryptor // dev.whyoleg.cryptography.algorithms/RSA.OAEP.PrivateKey.decryptor|decryptor(){}[0]
        }

        abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/RSA.PublicKey { // dev.whyoleg.cryptography.algorithms/RSA.OAEP.PublicKey|null[0]
            abstract fun encryptor(): dev.whyoleg.cryptography.operations/AuthenticatedEncryptor // dev.whyoleg.cryptography.algorithms/RSA.OAEP.PublicKey.encryptor|encryptor(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.OAEP> // dev.whyoleg.cryptography.algorithms/RSA.OAEP.Companion|null[0]
    }

    abstract interface PKCS1 : dev.whyoleg.cryptography.algorithms/RSA<dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PrivateKey, dev.whyoleg.cryptography.algorithms/RSA.PKCS1.KeyPair> { // dev.whyoleg.cryptography.algorithms/RSA.PKCS1|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.PKCS1> // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.id.<get-id>|<get-id>(){}[0]

        abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/RSA.KeyPair<dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PrivateKey> // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.KeyPair|null[0]

        abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey { // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PrivateKey|null[0]
            abstract fun decryptor(): dev.whyoleg.cryptography.operations/Decryptor // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PrivateKey.decryptor|decryptor(){}[0]
            abstract fun signatureGenerator(): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PrivateKey.signatureGenerator|signatureGenerator(){}[0]
        }

        abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/RSA.PublicKey { // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PublicKey|null[0]
            abstract fun encryptor(): dev.whyoleg.cryptography.operations/Encryptor // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PublicKey.encryptor|encryptor(){}[0]
            abstract fun signatureVerifier(): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.PublicKey.signatureVerifier|signatureVerifier(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.PKCS1> // dev.whyoleg.cryptography.algorithms/RSA.PKCS1.Companion|null[0]
    }

    abstract interface PSS : dev.whyoleg.cryptography.algorithms/RSA<dev.whyoleg.cryptography.algorithms/RSA.PSS.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.PSS.PrivateKey, dev.whyoleg.cryptography.algorithms/RSA.PSS.KeyPair> { // dev.whyoleg.cryptography.algorithms/RSA.PSS|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/RSA.PSS.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.PSS> // dev.whyoleg.cryptography.algorithms/RSA.PSS.id.<get-id>|<get-id>(){}[0]

        abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/RSA.KeyPair<dev.whyoleg.cryptography.algorithms/RSA.PSS.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.PSS.PrivateKey> // dev.whyoleg.cryptography.algorithms/RSA.PSS.KeyPair|null[0]

        abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey { // dev.whyoleg.cryptography.algorithms/RSA.PSS.PrivateKey|null[0]
            abstract fun signatureGenerator(): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/RSA.PSS.PrivateKey.signatureGenerator|signatureGenerator(){}[0]
            abstract fun signatureGenerator(dev.whyoleg.cryptography/BinarySize): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/RSA.PSS.PrivateKey.signatureGenerator|signatureGenerator(dev.whyoleg.cryptography.BinarySize){}[0]
        }

        abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/RSA.PublicKey { // dev.whyoleg.cryptography.algorithms/RSA.PSS.PublicKey|null[0]
            abstract fun signatureVerifier(): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/RSA.PSS.PublicKey.signatureVerifier|signatureVerifier(){}[0]
            abstract fun signatureVerifier(dev.whyoleg.cryptography/BinarySize): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/RSA.PSS.PublicKey.signatureVerifier|signatureVerifier(dev.whyoleg.cryptography.BinarySize){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.PSS> // dev.whyoleg.cryptography.algorithms/RSA.PSS.Companion|null[0]
    }

    abstract interface PrivateKey : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format> { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey|null[0]
        sealed class Format : dev.whyoleg.cryptography.materials.key/KeyFormat { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format|null[0]
            final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.toString|toString(){}[0]

            sealed class DER : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object PKCS1 : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.PKCS1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.PKCS1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.PKCS1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.PKCS1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.DER.PKCS1.hashCode|hashCode(){}[0]
                }
            }

            sealed class PEM : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object PKCS1 : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.PKCS1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.PKCS1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.PKCS1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.PKCS1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.PEM.PKCS1.hashCode|hashCode(){}[0]
                }
            }

            final object JWK : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.JWK|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.JWK.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.JWK.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.JWK.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PrivateKey.Format.JWK.hashCode|hashCode(){}[0]
            }
        }
    }

    abstract interface PublicKey : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format> { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey|null[0]
        sealed class Format : dev.whyoleg.cryptography.materials.key/KeyFormat { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format|null[0]
            final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.toString|toString(){}[0]

            sealed class DER : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object PKCS1 : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.PKCS1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.PKCS1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.PKCS1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.PKCS1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.DER.PKCS1.hashCode|hashCode(){}[0]
                }
            }

            sealed class PEM : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM|null[0]
                final object Generic : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.Generic|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.Generic.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.Generic.name.<get-name>|<get-name>(){}[0]
                }

                final object PKCS1 : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.PKCS1|null[0]
                    final val name // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.PKCS1.name|{}name[0]
                        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.PKCS1.name.<get-name>|<get-name>(){}[0]

                    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.PKCS1.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.PEM.PKCS1.hashCode|hashCode(){}[0]
                }
            }

            final object JWK : dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format { // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.JWK|null[0]
                final val name // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.JWK.name|{}name[0]
                    final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.JWK.name.<get-name>|<get-name>(){}[0]

                final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.JWK.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms/RSA.PublicKey.Format.JWK.hashCode|hashCode(){}[0]
            }
        }
    }

    abstract interface RAW : dev.whyoleg.cryptography.algorithms/RSA<dev.whyoleg.cryptography.algorithms/RSA.RAW.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.RAW.PrivateKey, dev.whyoleg.cryptography.algorithms/RSA.RAW.KeyPair> { // dev.whyoleg.cryptography.algorithms/RSA.RAW|null[0]
        open val id // dev.whyoleg.cryptography.algorithms/RSA.RAW.id|{}id[0]
            open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.RAW> // dev.whyoleg.cryptography.algorithms/RSA.RAW.id.<get-id>|<get-id>(){}[0]

        abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/RSA.KeyPair<dev.whyoleg.cryptography.algorithms/RSA.RAW.PublicKey, dev.whyoleg.cryptography.algorithms/RSA.RAW.PrivateKey> // dev.whyoleg.cryptography.algorithms/RSA.RAW.KeyPair|null[0]

        abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/RSA.PrivateKey { // dev.whyoleg.cryptography.algorithms/RSA.RAW.PrivateKey|null[0]
            abstract fun decryptor(): dev.whyoleg.cryptography.operations/Decryptor // dev.whyoleg.cryptography.algorithms/RSA.RAW.PrivateKey.decryptor|decryptor(){}[0]
        }

        abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/RSA.PublicKey { // dev.whyoleg.cryptography.algorithms/RSA.RAW.PublicKey|null[0]
            abstract fun encryptor(): dev.whyoleg.cryptography.operations/Encryptor // dev.whyoleg.cryptography.algorithms/RSA.RAW.PublicKey.encryptor|encryptor(){}[0]
        }

        final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/RSA.RAW> // dev.whyoleg.cryptography.algorithms/RSA.RAW.Companion|null[0]
    }
}

abstract interface <#A: dev.whyoleg.cryptography.materials.key/Key> dev.whyoleg.cryptography.materials.key/KeyGenerator { // dev.whyoleg.cryptography.materials.key/KeyGenerator|null[0]
    abstract fun generateKeyBlocking(): #A // dev.whyoleg.cryptography.materials.key/KeyGenerator.generateKeyBlocking|generateKeyBlocking(){}[0]
    open suspend fun generateKey(): #A // dev.whyoleg.cryptography.materials.key/KeyGenerator.generateKey|generateKey(){}[0]
}

abstract interface <#A: dev.whyoleg.cryptography.materials.key/Key> dev.whyoleg.cryptography.operations/SharedSecretGenerator { // dev.whyoleg.cryptography.operations/SharedSecretGenerator|null[0]
    abstract fun generateSharedSecretToByteArrayBlocking(#A): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SharedSecretGenerator.generateSharedSecretToByteArrayBlocking|generateSharedSecretToByteArrayBlocking(1:0){}[0]
    open fun generateSharedSecretBlocking(#A): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SharedSecretGenerator.generateSharedSecretBlocking|generateSharedSecretBlocking(1:0){}[0]
    open suspend fun generateSharedSecret(#A): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SharedSecretGenerator.generateSharedSecret|generateSharedSecret(1:0){}[0]
    open suspend fun generateSharedSecretToByteArray(#A): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SharedSecretGenerator.generateSharedSecretToByteArray|generateSharedSecretToByteArray(1:0){}[0]
}

abstract interface <#A: dev.whyoleg.cryptography.materials.key/KeyFormat, #B: dev.whyoleg.cryptography.materials.key/Key> dev.whyoleg.cryptography.materials.key/KeyDecoder { // dev.whyoleg.cryptography.materials.key/KeyDecoder|null[0]
    abstract fun decodeFromByteArrayBlocking(#A, kotlin/ByteArray): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFromByteArrayBlocking|decodeFromByteArrayBlocking(1:0;kotlin.ByteArray){}[0]
    open fun decodeFromBlocking(#A, kotlin/ByteArray): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFromBlocking|decodeFromBlocking(1:0;kotlin.ByteArray){}[0]
    open fun decodeFromByteStringBlocking(#A, kotlinx.io.bytestring/ByteString): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFromByteStringBlocking|decodeFromByteStringBlocking(1:0;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun decodeFrom(#A, kotlin/ByteArray): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFrom|decodeFrom(1:0;kotlin.ByteArray){}[0]
    open suspend fun decodeFromByteArray(#A, kotlin/ByteArray): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFromByteArray|decodeFromByteArray(1:0;kotlin.ByteArray){}[0]
    open suspend fun decodeFromByteString(#A, kotlinx.io.bytestring/ByteString): #B // dev.whyoleg.cryptography.materials.key/KeyDecoder.decodeFromByteString|decodeFromByteString(1:0;kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface <#A: dev.whyoleg.cryptography.materials.key/KeyFormat> dev.whyoleg.cryptography.materials.key/EncodableKey : dev.whyoleg.cryptography.materials.key/Key { // dev.whyoleg.cryptography.materials.key/EncodableKey|null[0]
    abstract fun encodeToByteArrayBlocking(#A): kotlin/ByteArray // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeToByteArrayBlocking|encodeToByteArrayBlocking(1:0){}[0]
    open fun encodeToBlocking(#A): kotlin/ByteArray // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeToBlocking|encodeToBlocking(1:0){}[0]
    open fun encodeToByteStringBlocking(#A): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeToByteStringBlocking|encodeToByteStringBlocking(1:0){}[0]
    open suspend fun encodeTo(#A): kotlin/ByteArray // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeTo|encodeTo(1:0){}[0]
    open suspend fun encodeToByteArray(#A): kotlin/ByteArray // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeToByteArray|encodeToByteArray(1:0){}[0]
    open suspend fun encodeToByteString(#A): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.materials.key/EncodableKey.encodeToByteString|encodeToByteString(1:0){}[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305 : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.id.<get-id>|<get-id>(){}[0]

    abstract fun keyDecoder(): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format, dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.keyDecoder|keyDecoder(){}[0]
    abstract fun keyGenerator(): dev.whyoleg.cryptography.materials.key/KeyGenerator<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.keyGenerator|keyGenerator(){}[0]

    abstract interface Key : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format> { // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key|null[0]
        abstract fun cipher(): dev.whyoleg.cryptography.operations/IvAuthenticatedCipher // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.cipher|cipher(){}[0]

        final enum class Format : dev.whyoleg.cryptography.materials.key/KeyFormat, kotlin/Enum<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format> { // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format|null[0]
            enum entry JWK // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.JWK|null[0]
            enum entry RAW // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.RAW|null[0]

            final val entries // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.entries.<get-entries>|<get-entries>#static(){}[0]

            final fun valueOf(kotlin/String): dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Key.Format.values|values#static(){}[0]
        }
    }

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305> // dev.whyoleg.cryptography.algorithms/ChaCha20Poly1305.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/Digest : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/Digest|null[0]
    abstract val id // dev.whyoleg.cryptography.algorithms/Digest.id|{}id[0]
        abstract fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/Digest.id.<get-id>|<get-id>(){}[0]

    abstract fun hasher(): dev.whyoleg.cryptography.operations/Hasher // dev.whyoleg.cryptography.algorithms/Digest.hasher|hasher(){}[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/ECDH : dev.whyoleg.cryptography.algorithms/EC<dev.whyoleg.cryptography.algorithms/ECDH.PublicKey, dev.whyoleg.cryptography.algorithms/ECDH.PrivateKey, dev.whyoleg.cryptography.algorithms/ECDH.KeyPair> { // dev.whyoleg.cryptography.algorithms/ECDH|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/ECDH.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ECDH> // dev.whyoleg.cryptography.algorithms/ECDH.id.<get-id>|<get-id>(){}[0]

    abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/EC.KeyPair<dev.whyoleg.cryptography.algorithms/ECDH.PublicKey, dev.whyoleg.cryptography.algorithms/ECDH.PrivateKey> // dev.whyoleg.cryptography.algorithms/ECDH.KeyPair|null[0]

    abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/EC.PrivateKey { // dev.whyoleg.cryptography.algorithms/ECDH.PrivateKey|null[0]
        abstract fun sharedSecretGenerator(): dev.whyoleg.cryptography.operations/SharedSecretGenerator<dev.whyoleg.cryptography.algorithms/ECDH.PublicKey> // dev.whyoleg.cryptography.algorithms/ECDH.PrivateKey.sharedSecretGenerator|sharedSecretGenerator(){}[0]
    }

    abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/EC.PublicKey { // dev.whyoleg.cryptography.algorithms/ECDH.PublicKey|null[0]
        abstract fun sharedSecretGenerator(): dev.whyoleg.cryptography.operations/SharedSecretGenerator<dev.whyoleg.cryptography.algorithms/ECDH.PrivateKey> // dev.whyoleg.cryptography.algorithms/ECDH.PublicKey.sharedSecretGenerator|sharedSecretGenerator(){}[0]
    }

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ECDH> // dev.whyoleg.cryptography.algorithms/ECDH.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/ECDSA : dev.whyoleg.cryptography.algorithms/EC<dev.whyoleg.cryptography.algorithms/ECDSA.PublicKey, dev.whyoleg.cryptography.algorithms/ECDSA.PrivateKey, dev.whyoleg.cryptography.algorithms/ECDSA.KeyPair> { // dev.whyoleg.cryptography.algorithms/ECDSA|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/ECDSA.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ECDSA> // dev.whyoleg.cryptography.algorithms/ECDSA.id.<get-id>|<get-id>(){}[0]

    final enum class SignatureFormat : kotlin/Enum<dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat> { // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat|null[0]
        enum entry DER // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.DER|null[0]
        enum entry RAW // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.RAW|null[0]

        final val entries // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat> // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat> // dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat.values|values#static(){}[0]
    }

    abstract interface KeyPair : dev.whyoleg.cryptography.algorithms/EC.KeyPair<dev.whyoleg.cryptography.algorithms/ECDSA.PublicKey, dev.whyoleg.cryptography.algorithms/ECDSA.PrivateKey> // dev.whyoleg.cryptography.algorithms/ECDSA.KeyPair|null[0]

    abstract interface PrivateKey : dev.whyoleg.cryptography.algorithms/EC.PrivateKey { // dev.whyoleg.cryptography.algorithms/ECDSA.PrivateKey|null[0]
        abstract fun signatureGenerator(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/ECDSA.PrivateKey.signatureGenerator|signatureGenerator(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.algorithms.ECDSA.SignatureFormat){}[0]
    }

    abstract interface PublicKey : dev.whyoleg.cryptography.algorithms/EC.PublicKey { // dev.whyoleg.cryptography.algorithms/ECDSA.PublicKey|null[0]
        abstract fun signatureVerifier(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, dev.whyoleg.cryptography.algorithms/ECDSA.SignatureFormat): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/ECDSA.PublicKey.signatureVerifier|signatureVerifier(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.algorithms.ECDSA.SignatureFormat){}[0]
    }

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/ECDSA> // dev.whyoleg.cryptography.algorithms/ECDSA.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/HKDF : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/HKDF|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/HKDF.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/HKDF> // dev.whyoleg.cryptography.algorithms/HKDF.id.<get-id>|<get-id>(){}[0]

    abstract fun secretDerivation(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, dev.whyoleg.cryptography/BinarySize, kotlin/ByteArray?, kotlin/ByteArray? = ...): dev.whyoleg.cryptography.operations/SecretDerivation // dev.whyoleg.cryptography.algorithms/HKDF.secretDerivation|secretDerivation(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.BinarySize;kotlin.ByteArray?;kotlin.ByteArray?){}[0]
    open fun secretDerivation(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, dev.whyoleg.cryptography/BinarySize, kotlinx.io.bytestring/ByteString?, kotlinx.io.bytestring/ByteString? = ...): dev.whyoleg.cryptography.operations/SecretDerivation // dev.whyoleg.cryptography.algorithms/HKDF.secretDerivation|secretDerivation(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;dev.whyoleg.cryptography.BinarySize;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString?){}[0]

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/HKDF> // dev.whyoleg.cryptography.algorithms/HKDF.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/HMAC : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/HMAC|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/HMAC.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/HMAC> // dev.whyoleg.cryptography.algorithms/HMAC.id.<get-id>|<get-id>(){}[0]

    abstract fun keyDecoder(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>): dev.whyoleg.cryptography.materials.key/KeyDecoder<dev.whyoleg.cryptography.algorithms/HMAC.Key.Format, dev.whyoleg.cryptography.algorithms/HMAC.Key> // dev.whyoleg.cryptography.algorithms/HMAC.keyDecoder|keyDecoder(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>){}[0]
    abstract fun keyGenerator(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> = ...): dev.whyoleg.cryptography.materials.key/KeyGenerator<dev.whyoleg.cryptography.algorithms/HMAC.Key> // dev.whyoleg.cryptography.algorithms/HMAC.keyGenerator|keyGenerator(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>){}[0]

    abstract interface Key : dev.whyoleg.cryptography.materials.key/EncodableKey<dev.whyoleg.cryptography.algorithms/HMAC.Key.Format> { // dev.whyoleg.cryptography.algorithms/HMAC.Key|null[0]
        abstract fun signatureGenerator(): dev.whyoleg.cryptography.operations/SignatureGenerator // dev.whyoleg.cryptography.algorithms/HMAC.Key.signatureGenerator|signatureGenerator(){}[0]
        abstract fun signatureVerifier(): dev.whyoleg.cryptography.operations/SignatureVerifier // dev.whyoleg.cryptography.algorithms/HMAC.Key.signatureVerifier|signatureVerifier(){}[0]

        final enum class Format : dev.whyoleg.cryptography.materials.key/KeyFormat, kotlin/Enum<dev.whyoleg.cryptography.algorithms/HMAC.Key.Format> { // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format|null[0]
            enum entry JWK // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.JWK|null[0]
            enum entry RAW // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.RAW|null[0]

            final val entries // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.entries|#static{}entries[0]
                final fun <get-entries>(): kotlin.enums/EnumEntries<dev.whyoleg.cryptography.algorithms/HMAC.Key.Format> // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.entries.<get-entries>|<get-entries>#static(){}[0]

            final fun valueOf(kotlin/String): dev.whyoleg.cryptography.algorithms/HMAC.Key.Format // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.valueOf|valueOf#static(kotlin.String){}[0]
            final fun values(): kotlin/Array<dev.whyoleg.cryptography.algorithms/HMAC.Key.Format> // dev.whyoleg.cryptography.algorithms/HMAC.Key.Format.values|values#static(){}[0]
        }
    }

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/HMAC> // dev.whyoleg.cryptography.algorithms/HMAC.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.algorithms/PBKDF2 : dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography.algorithms/PBKDF2|null[0]
    open val id // dev.whyoleg.cryptography.algorithms/PBKDF2.id|{}id[0]
        open fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/PBKDF2> // dev.whyoleg.cryptography.algorithms/PBKDF2.id.<get-id>|<get-id>(){}[0]

    abstract fun secretDerivation(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, kotlin/Int, dev.whyoleg.cryptography/BinarySize, kotlin/ByteArray): dev.whyoleg.cryptography.operations/SecretDerivation // dev.whyoleg.cryptography.algorithms/PBKDF2.secretDerivation|secretDerivation(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;kotlin.Int;dev.whyoleg.cryptography.BinarySize;kotlin.ByteArray){}[0]
    open fun secretDerivation(dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest>, kotlin/Int, dev.whyoleg.cryptography/BinarySize, kotlinx.io.bytestring/ByteString): dev.whyoleg.cryptography.operations/SecretDerivation // dev.whyoleg.cryptography.algorithms/PBKDF2.secretDerivation|secretDerivation(dev.whyoleg.cryptography.CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms.Digest>;kotlin.Int;dev.whyoleg.cryptography.BinarySize;kotlinx.io.bytestring.ByteString){}[0]

    final object Companion : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/PBKDF2> // dev.whyoleg.cryptography.algorithms/PBKDF2.Companion|null[0]
}

abstract interface dev.whyoleg.cryptography.materials.key/Key // dev.whyoleg.cryptography.materials.key/Key|null[0]

abstract interface dev.whyoleg.cryptography.materials.key/KeyFormat { // dev.whyoleg.cryptography.materials.key/KeyFormat|null[0]
    abstract val name // dev.whyoleg.cryptography.materials.key/KeyFormat.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.whyoleg.cryptography.materials.key/KeyFormat.name.<get-name>|<get-name>(){}[0]

    abstract fun toString(): kotlin/String // dev.whyoleg.cryptography.materials.key/KeyFormat.toString|toString(){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/AuthenticatedCipher : dev.whyoleg.cryptography.operations/AuthenticatedDecryptor, dev.whyoleg.cryptography.operations/AuthenticatedEncryptor, dev.whyoleg.cryptography.operations/Cipher // dev.whyoleg.cryptography.operations/AuthenticatedCipher|null[0]

abstract interface dev.whyoleg.cryptography.operations/AuthenticatedDecryptor : dev.whyoleg.cryptography.operations/Decryptor { // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor|null[0]
    abstract fun decryptBlocking(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    abstract fun decryptingSink(kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    abstract fun decryptingSource(kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
    open fun decryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray){}[0]
    open fun decryptBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open fun decryptBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptBlocking|decryptBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
    open fun decryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink){}[0]
    open fun decryptingSink(kotlinx.io/RawSink, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink;kotlinx.io.bytestring.ByteString?){}[0]
    open fun decryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource){}[0]
    open fun decryptingSource(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString?){}[0]
    open suspend fun decrypt(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decrypt|decrypt(kotlin.ByteArray){}[0]
    open suspend fun decrypt(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decrypt|decrypt(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open suspend fun decrypt(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decrypt|decrypt(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun decrypt(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedDecryptor.decrypt|decrypt(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/AuthenticatedEncryptor : dev.whyoleg.cryptography.operations/Encryptor { // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor|null[0]
    abstract fun encryptBlocking(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    abstract fun encryptingSink(kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    abstract fun encryptingSource(kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
    open fun encryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray){}[0]
    open fun encryptBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open fun encryptBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptBlocking|encryptBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
    open fun encryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink){}[0]
    open fun encryptingSink(kotlinx.io/RawSink, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink;kotlinx.io.bytestring.ByteString?){}[0]
    open fun encryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource){}[0]
    open fun encryptingSource(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString?){}[0]
    open suspend fun encrypt(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encrypt|encrypt(kotlin.ByteArray){}[0]
    open suspend fun encrypt(kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encrypt|encrypt(kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open suspend fun encrypt(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encrypt|encrypt(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun encrypt(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/AuthenticatedEncryptor.encrypt|encrypt(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/Cipher : dev.whyoleg.cryptography.operations/Decryptor, dev.whyoleg.cryptography.operations/Encryptor // dev.whyoleg.cryptography.operations/Cipher|null[0]

abstract interface dev.whyoleg.cryptography.operations/Decryptor { // dev.whyoleg.cryptography.operations/Decryptor|null[0]
    abstract fun decryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Decryptor.decryptBlocking|decryptBlocking(kotlin.ByteArray){}[0]
    abstract fun decryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/Decryptor.decryptingSink|decryptingSink(kotlinx.io.RawSink){}[0]
    abstract fun decryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/Decryptor.decryptingSource|decryptingSource(kotlinx.io.RawSource){}[0]
    open fun decryptBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Decryptor.decryptBlocking|decryptBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun decrypt(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Decryptor.decrypt|decrypt(kotlin.ByteArray){}[0]
    open suspend fun decrypt(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Decryptor.decrypt|decrypt(kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/Encryptor { // dev.whyoleg.cryptography.operations/Encryptor|null[0]
    abstract fun encryptBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Encryptor.encryptBlocking|encryptBlocking(kotlin.ByteArray){}[0]
    abstract fun encryptingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/Encryptor.encryptingSink|encryptingSink(kotlinx.io.RawSink){}[0]
    abstract fun encryptingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/Encryptor.encryptingSource|encryptingSource(kotlinx.io.RawSource){}[0]
    open fun encryptBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Encryptor.encryptBlocking|encryptBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun encrypt(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Encryptor.encrypt|encrypt(kotlin.ByteArray){}[0]
    open suspend fun encrypt(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Encryptor.encrypt|encrypt(kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/HashFunction : dev.whyoleg.cryptography.operations/UpdateFunction { // dev.whyoleg.cryptography.operations/HashFunction|null[0]
    abstract fun hashIntoByteArray(kotlin/ByteArray, kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.operations/HashFunction.hashIntoByteArray|hashIntoByteArray(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun hashToByteArray(): kotlin/ByteArray // dev.whyoleg.cryptography.operations/HashFunction.hashToByteArray|hashToByteArray(){}[0]
    open fun hash(): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/HashFunction.hash|hash(){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/Hasher { // dev.whyoleg.cryptography.operations/Hasher|null[0]
    abstract fun createHashFunction(): dev.whyoleg.cryptography.operations/HashFunction // dev.whyoleg.cryptography.operations/Hasher.createHashFunction|createHashFunction(){}[0]
    open fun hashBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Hasher.hashBlocking|hashBlocking(kotlin.ByteArray){}[0]
    open fun hashBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Hasher.hashBlocking|hashBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open fun hashBlocking(kotlinx.io/RawSource): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Hasher.hashBlocking|hashBlocking(kotlinx.io.RawSource){}[0]
    open suspend fun hash(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/Hasher.hash|hash(kotlin.ByteArray){}[0]
    open suspend fun hash(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Hasher.hash|hash(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun hash(kotlinx.io/RawSource): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/Hasher.hash|hash(kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/IvAuthenticatedCipher : dev.whyoleg.cryptography.operations/AuthenticatedCipher, dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor, dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor, dev.whyoleg.cryptography.operations/IvCipher // dev.whyoleg.cryptography.operations/IvAuthenticatedCipher|null[0]

abstract interface dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor : dev.whyoleg.cryptography.operations/AuthenticatedDecryptor, dev.whyoleg.cryptography.operations/IvDecryptor { // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor|null[0]
    abstract fun decryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    abstract fun decryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    abstract fun decryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
    open fun decryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun decryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun decryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
    open fun decryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    open fun decryptingSinkWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSink, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSink;kotlinx.io.bytestring.ByteString?){}[0]
    open fun decryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
    open fun decryptingSourceWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString?){}[0]
    open suspend fun decryptWithIv(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIv|decryptWithIv(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun decryptWithIv(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIv|decryptWithIv(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open suspend fun decryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIv|decryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun decryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedDecryptor.decryptWithIv|decryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor : dev.whyoleg.cryptography.operations/AuthenticatedEncryptor, dev.whyoleg.cryptography.operations/IvEncryptor { // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor|null[0]
    abstract fun encryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    abstract fun encryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink, kotlin/ByteArray?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink;kotlin.ByteArray?){}[0]
    abstract fun encryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource, kotlin/ByteArray?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource;kotlin.ByteArray?){}[0]
    open fun encryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun encryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun encryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
    open fun encryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    open fun encryptingSinkWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSink, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSink;kotlinx.io.bytestring.ByteString?){}[0]
    open fun encryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
    open fun encryptingSourceWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString?): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString?){}[0]
    open suspend fun encryptWithIv(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIv|encryptWithIv(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun encryptWithIv(kotlin/ByteArray, kotlin/ByteArray, kotlin/ByteArray?): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIv|encryptWithIv(kotlin.ByteArray;kotlin.ByteArray;kotlin.ByteArray?){}[0]
    open suspend fun encryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIv|encryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun encryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString?): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvAuthenticatedEncryptor.encryptWithIv|encryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString?){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/IvCipher : dev.whyoleg.cryptography.operations/Cipher, dev.whyoleg.cryptography.operations/IvDecryptor, dev.whyoleg.cryptography.operations/IvEncryptor // dev.whyoleg.cryptography.operations/IvCipher|null[0]

abstract interface dev.whyoleg.cryptography.operations/IvDecryptor : dev.whyoleg.cryptography.operations/Decryptor { // dev.whyoleg.cryptography.operations/IvDecryptor|null[0]
    abstract fun decryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    abstract fun decryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    abstract fun decryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
    open fun decryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvDecryptor.decryptWithIvBlocking|decryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun decryptingSinkWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvDecryptor.decryptingSinkWithIv|decryptingSinkWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSink){}[0]
    open fun decryptingSourceWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvDecryptor.decryptingSourceWithIv|decryptingSourceWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSource){}[0]
    open suspend fun decryptWithIv(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvDecryptor.decryptWithIv|decryptWithIv(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun decryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvDecryptor.decryptWithIv|decryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/IvEncryptor : dev.whyoleg.cryptography.operations/Encryptor { // dev.whyoleg.cryptography.operations/IvEncryptor|null[0]
    abstract fun encryptWithIvBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    abstract fun encryptingSinkWithIv(kotlin/ByteArray, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlin.ByteArray;kotlinx.io.RawSink){}[0]
    abstract fun encryptingSourceWithIv(kotlin/ByteArray, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlin.ByteArray;kotlinx.io.RawSource){}[0]
    open fun encryptWithIvBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvEncryptor.encryptWithIvBlocking|encryptWithIvBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun encryptingSinkWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/IvEncryptor.encryptingSinkWithIv|encryptingSinkWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSink){}[0]
    open fun encryptingSourceWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/IvEncryptor.encryptingSourceWithIv|encryptingSourceWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.RawSource){}[0]
    open suspend fun encryptWithIv(kotlin/ByteArray, kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/IvEncryptor.encryptWithIv|encryptWithIv(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun encryptWithIv(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/IvEncryptor.encryptWithIv|encryptWithIv(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/SecretDerivation { // dev.whyoleg.cryptography.operations/SecretDerivation|null[0]
    abstract fun deriveSecretToByteArrayBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretToByteArrayBlocking|deriveSecretToByteArrayBlocking(kotlin.ByteArray){}[0]
    open fun deriveSecretBlocking(kotlin/ByteArray): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretBlocking|deriveSecretBlocking(kotlin.ByteArray){}[0]
    open fun deriveSecretBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretBlocking|deriveSecretBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open fun deriveSecretToByteArrayBlocking(kotlinx.io.bytestring/ByteString): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretToByteArrayBlocking|deriveSecretToByteArrayBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun deriveSecret(kotlin/ByteArray): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecret|deriveSecret(kotlin.ByteArray){}[0]
    open suspend fun deriveSecret(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecret|deriveSecret(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun deriveSecretToByteArray(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretToByteArray|deriveSecretToByteArray(kotlin.ByteArray){}[0]
    open suspend fun deriveSecretToByteArray(kotlinx.io.bytestring/ByteString): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SecretDerivation.deriveSecretToByteArray|deriveSecretToByteArray(kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/SignFunction : dev.whyoleg.cryptography.operations/UpdateFunction { // dev.whyoleg.cryptography.operations/SignFunction|null[0]
    abstract fun signIntoByteArray(kotlin/ByteArray, kotlin/Int = ...): kotlin/Int // dev.whyoleg.cryptography.operations/SignFunction.signIntoByteArray|signIntoByteArray(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun signToByteArray(): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SignFunction.signToByteArray|signToByteArray(){}[0]
    open fun sign(): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SignFunction.sign|sign(){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/SignatureGenerator { // dev.whyoleg.cryptography.operations/SignatureGenerator|null[0]
    abstract fun createSignFunction(): dev.whyoleg.cryptography.operations/SignFunction // dev.whyoleg.cryptography.operations/SignatureGenerator.createSignFunction|createSignFunction(){}[0]
    open fun generateSignatureBlocking(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignatureBlocking|generateSignatureBlocking(kotlin.ByteArray){}[0]
    open fun generateSignatureBlocking(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignatureBlocking|generateSignatureBlocking(kotlinx.io.bytestring.ByteString){}[0]
    open fun generateSignatureBlocking(kotlinx.io/RawSource): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignatureBlocking|generateSignatureBlocking(kotlinx.io.RawSource){}[0]
    open suspend fun generateSignature(kotlin/ByteArray): kotlin/ByteArray // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignature|generateSignature(kotlin.ByteArray){}[0]
    open suspend fun generateSignature(kotlinx.io.bytestring/ByteString): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignature|generateSignature(kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun generateSignature(kotlinx.io/RawSource): kotlinx.io.bytestring/ByteString // dev.whyoleg.cryptography.operations/SignatureGenerator.generateSignature|generateSignature(kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/SignatureVerifier { // dev.whyoleg.cryptography.operations/SignatureVerifier|null[0]
    abstract fun createVerifyFunction(): dev.whyoleg.cryptography.operations/VerifyFunction // dev.whyoleg.cryptography.operations/SignatureVerifier.createVerifyFunction|createVerifyFunction(){}[0]
    open fun tryVerifySignatureBlocking(kotlin/ByteArray, kotlin/ByteArray): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignatureBlocking|tryVerifySignatureBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun tryVerifySignatureBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignatureBlocking|tryVerifySignatureBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun tryVerifySignatureBlocking(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignatureBlocking|tryVerifySignatureBlocking(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString){}[0]
    open fun verifySignatureBlocking(kotlin/ByteArray, kotlin/ByteArray) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignatureBlocking|verifySignatureBlocking(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open fun verifySignatureBlocking(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignatureBlocking|verifySignatureBlocking(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open fun verifySignatureBlocking(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignatureBlocking|verifySignatureBlocking(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun tryVerifySignature(kotlin/ByteArray, kotlin/ByteArray): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignature|tryVerifySignature(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun tryVerifySignature(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignature|tryVerifySignature(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun tryVerifySignature(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString): kotlin/Boolean // dev.whyoleg.cryptography.operations/SignatureVerifier.tryVerifySignature|tryVerifySignature(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun verifySignature(kotlin/ByteArray, kotlin/ByteArray) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignature|verifySignature(kotlin.ByteArray;kotlin.ByteArray){}[0]
    open suspend fun verifySignature(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignature|verifySignature(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    open suspend fun verifySignature(kotlinx.io/RawSource, kotlinx.io.bytestring/ByteString) // dev.whyoleg.cryptography.operations/SignatureVerifier.verifySignature|verifySignature(kotlinx.io.RawSource;kotlinx.io.bytestring.ByteString){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/UpdateFunction : kotlin/AutoCloseable { // dev.whyoleg.cryptography.operations/UpdateFunction|null[0]
    abstract fun reset() // dev.whyoleg.cryptography.operations/UpdateFunction.reset|reset(){}[0]
    abstract fun update(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...) // dev.whyoleg.cryptography.operations/UpdateFunction.update|update(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun update(kotlinx.io.bytestring/ByteString, kotlin/Int = ..., kotlin/Int = ...) // dev.whyoleg.cryptography.operations/UpdateFunction.update|update(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]
    open fun update(kotlinx.io/RawSource) // dev.whyoleg.cryptography.operations/UpdateFunction.update|update(kotlinx.io.RawSource){}[0]
    open fun updatingSink(kotlinx.io/RawSink): kotlinx.io/RawSink // dev.whyoleg.cryptography.operations/UpdateFunction.updatingSink|updatingSink(kotlinx.io.RawSink){}[0]
    open fun updatingSource(kotlinx.io/RawSource): kotlinx.io/RawSource // dev.whyoleg.cryptography.operations/UpdateFunction.updatingSource|updatingSource(kotlinx.io.RawSource){}[0]
}

abstract interface dev.whyoleg.cryptography.operations/VerifyFunction : dev.whyoleg.cryptography.operations/UpdateFunction { // dev.whyoleg.cryptography.operations/VerifyFunction|null[0]
    abstract fun tryVerify(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/Boolean // dev.whyoleg.cryptography.operations/VerifyFunction.tryVerify|tryVerify(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    abstract fun verify(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...) // dev.whyoleg.cryptography.operations/VerifyFunction.verify|verify(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun tryVerify(kotlinx.io.bytestring/ByteString, kotlin/Int = ..., kotlin/Int = ...): kotlin/Boolean // dev.whyoleg.cryptography.operations/VerifyFunction.tryVerify|tryVerify(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]
    open fun verify(kotlinx.io.bytestring/ByteString, kotlin/Int = ..., kotlin/Int = ...) // dev.whyoleg.cryptography.operations/VerifyFunction.verify|verify(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]
}

abstract interface dev.whyoleg.cryptography/CryptographyAlgorithm { // dev.whyoleg.cryptography/CryptographyAlgorithm|null[0]
    abstract val id // dev.whyoleg.cryptography/CryptographyAlgorithm.id|{}id[0]
        abstract fun <get-id>(): dev.whyoleg.cryptography/CryptographyAlgorithmId<*> // dev.whyoleg.cryptography/CryptographyAlgorithm.id.<get-id>|<get-id>(){}[0]
}

abstract class <#A: dev.whyoleg.cryptography/CryptographyAlgorithm> dev.whyoleg.cryptography/CryptographyAlgorithmId { // dev.whyoleg.cryptography/CryptographyAlgorithmId|null[0]
    constructor <init>(kotlin/String) // dev.whyoleg.cryptography/CryptographyAlgorithmId.<init>|<init>(kotlin.String){}[0]

    final val name // dev.whyoleg.cryptography/CryptographyAlgorithmId.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.whyoleg.cryptography/CryptographyAlgorithmId.name.<get-name>|<get-name>(){}[0]
}

abstract class dev.whyoleg.cryptography/CryptographyProvider { // dev.whyoleg.cryptography/CryptographyProvider|null[0]
    constructor <init>() // dev.whyoleg.cryptography/CryptographyProvider.<init>|<init>(){}[0]

    abstract val name // dev.whyoleg.cryptography/CryptographyProvider.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.whyoleg.cryptography/CryptographyProvider.name.<get-name>|<get-name>(){}[0]

    abstract fun <#A1: dev.whyoleg.cryptography/CryptographyAlgorithm> getOrNull(dev.whyoleg.cryptography/CryptographyAlgorithmId<#A1>): #A1? // dev.whyoleg.cryptography/CryptographyProvider.getOrNull|getOrNull(dev.whyoleg.cryptography.CryptographyAlgorithmId<0:0>){0§<dev.whyoleg.cryptography.CryptographyAlgorithm>}[0]
    open fun <#A1: dev.whyoleg.cryptography/CryptographyAlgorithm> get(dev.whyoleg.cryptography/CryptographyAlgorithmId<#A1>): #A1 // dev.whyoleg.cryptography/CryptographyProvider.get|get(dev.whyoleg.cryptography.CryptographyAlgorithmId<0:0>){0§<dev.whyoleg.cryptography.CryptographyAlgorithm>}[0]

    final object Companion { // dev.whyoleg.cryptography/CryptographyProvider.Companion|null[0]
        final val Default // dev.whyoleg.cryptography/CryptographyProvider.Companion.Default|{}Default[0]
            final fun <get-Default>(): dev.whyoleg.cryptography/CryptographyProvider // dev.whyoleg.cryptography/CryptographyProvider.Companion.Default.<get-Default>|<get-Default>(){}[0]
    }

    final object Registry { // dev.whyoleg.cryptography/CryptographyProvider.Registry|null[0]
        final val registeredProviders // dev.whyoleg.cryptography/CryptographyProvider.Registry.registeredProviders|{}registeredProviders[0]
            final fun <get-registeredProviders>(): kotlin.sequences/Sequence<dev.whyoleg.cryptography/CryptographyProvider> // dev.whyoleg.cryptography/CryptographyProvider.Registry.registeredProviders.<get-registeredProviders>|<get-registeredProviders>(){}[0]

        final fun registerProvider(dev.whyoleg.cryptography/CryptographyProvider) // dev.whyoleg.cryptography/CryptographyProvider.Registry.registerProvider|registerProvider(dev.whyoleg.cryptography.CryptographyProvider){}[0]
        final fun registerProvider(kotlin/Lazy<dev.whyoleg.cryptography/CryptographyProvider>) // dev.whyoleg.cryptography/CryptographyProvider.Registry.registerProvider|registerProvider(kotlin.Lazy<dev.whyoleg.cryptography.CryptographyProvider>){}[0]
    }
}

final class dev.whyoleg.cryptography/CryptographyAlgorithmNotFoundException : dev.whyoleg.cryptography/CryptographyException { // dev.whyoleg.cryptography/CryptographyAlgorithmNotFoundException|null[0]
    constructor <init>(dev.whyoleg.cryptography/CryptographyAlgorithmId<*>) // dev.whyoleg.cryptography/CryptographyAlgorithmNotFoundException.<init>|<init>(dev.whyoleg.cryptography.CryptographyAlgorithmId<*>){}[0]
}

final value class dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize { // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize|null[0]
    constructor <init>(dev.whyoleg.cryptography/BinarySize) // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.<init>|<init>(dev.whyoleg.cryptography.BinarySize){}[0]

    final val value // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.value|{}value[0]
        final fun <get-value>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.toString|toString(){}[0]

    final object Companion { // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion|null[0]
        final val B128 // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B128|{}B128[0]
            final fun <get-B128>(): dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B128.<get-B128>|<get-B128>(){}[0]
        final val B192 // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B192|{}B192[0]
            final fun <get-B192>(): dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B192.<get-B192>|<get-B192>(){}[0]
        final val B256 // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B256|{}B256[0]
            final fun <get-B256>(): dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize // dev.whyoleg.cryptography.algorithms.symmetric/SymmetricKeySize.Companion.B256.<get-B256>|<get-B256>(){}[0]
    }
}

final value class dev.whyoleg.cryptography/BinarySize : kotlin/Comparable<dev.whyoleg.cryptography/BinarySize> { // dev.whyoleg.cryptography/BinarySize|null[0]
    final val inBits // dev.whyoleg.cryptography/BinarySize.inBits|{}inBits[0]
        final fun <get-inBits>(): kotlin/Int // dev.whyoleg.cryptography/BinarySize.inBits.<get-inBits>|<get-inBits>(){}[0]
    final val inBytes // dev.whyoleg.cryptography/BinarySize.inBytes|{}inBytes[0]
        final fun <get-inBytes>(): kotlin/Int // dev.whyoleg.cryptography/BinarySize.inBytes.<get-inBytes>|<get-inBytes>(){}[0]

    final fun compareTo(dev.whyoleg.cryptography/BinarySize): kotlin/Int // dev.whyoleg.cryptography/BinarySize.compareTo|compareTo(dev.whyoleg.cryptography.BinarySize){}[0]
    final fun div(kotlin/Int): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.div|div(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.whyoleg.cryptography/BinarySize.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.whyoleg.cryptography/BinarySize.hashCode|hashCode(){}[0]
    final fun minus(dev.whyoleg.cryptography/BinarySize): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.minus|minus(dev.whyoleg.cryptography.BinarySize){}[0]
    final fun plus(dev.whyoleg.cryptography/BinarySize): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.plus|plus(dev.whyoleg.cryptography.BinarySize){}[0]
    final fun rem(kotlin/Int): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.rem|rem(kotlin.Int){}[0]
    final fun times(kotlin/Int): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.times|times(kotlin.Int){}[0]
    final fun toString(): kotlin/String // dev.whyoleg.cryptography/BinarySize.toString|toString(){}[0]

    final object Companion { // dev.whyoleg.cryptography/BinarySize.Companion|null[0]
        final val bits // dev.whyoleg.cryptography/BinarySize.Companion.bits|@kotlin.Int{}bits[0]
            final fun (kotlin/Int).<get-bits>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.Companion.bits.<get-bits>|<get-bits>@kotlin.Int(){}[0]
        final val bytes // dev.whyoleg.cryptography/BinarySize.Companion.bytes|@kotlin.Int{}bytes[0]
            final fun (kotlin/Int).<get-bytes>(): dev.whyoleg.cryptography/BinarySize // dev.whyoleg.cryptography/BinarySize.Companion.bytes.<get-bytes>|<get-bytes>@kotlin.Int(){}[0]
    }
}

open class dev.whyoleg.cryptography/CryptographyException : kotlin/RuntimeException { // dev.whyoleg.cryptography/CryptographyException|null[0]
    constructor <init>(kotlin/String?) // dev.whyoleg.cryptography/CryptographyException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // dev.whyoleg.cryptography/CryptographyException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // dev.whyoleg.cryptography/CryptographyException.<init>|<init>(kotlin.Throwable?){}[0]
}

final object dev.whyoleg.cryptography.algorithms/MD4 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/MD4|null[0]

final object dev.whyoleg.cryptography.algorithms/MD5 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/MD5|null[0]

final object dev.whyoleg.cryptography.algorithms/RIPEMD160 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/RIPEMD160|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA1 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA1|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA224 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA224|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA256 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA256|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA384 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA384|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA3_224 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA3_224|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA3_256 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA3_256|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA3_384 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA3_384|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA3_512 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA3_512|null[0]

final object dev.whyoleg.cryptography.algorithms/SHA512 : dev.whyoleg.cryptography/CryptographyAlgorithmId<dev.whyoleg.cryptography.algorithms/Digest> // dev.whyoleg.cryptography.algorithms/SHA512|null[0]

final object dev.whyoleg.cryptography/CryptographySystem { // dev.whyoleg.cryptography/CryptographySystem|null[0]
    final fun getDefaultProvider(): dev.whyoleg.cryptography/CryptographyProvider // dev.whyoleg.cryptography/CryptographySystem.getDefaultProvider|getDefaultProvider(){}[0]
    final fun getDefaultRandom(): dev.whyoleg.cryptography.random/CryptographyRandom // dev.whyoleg.cryptography/CryptographySystem.getDefaultRandom|getDefaultRandom(){}[0]
    final fun getRegisteredProviders(): kotlin.collections/List<dev.whyoleg.cryptography/CryptographyProvider> // dev.whyoleg.cryptography/CryptographySystem.getRegisteredProviders|getRegisteredProviders(){}[0]
    final fun registerProvider(kotlin/Lazy<dev.whyoleg.cryptography/CryptographyProvider>, kotlin/Int) // dev.whyoleg.cryptography/CryptographySystem.registerProvider|registerProvider(kotlin.Lazy<dev.whyoleg.cryptography.CryptographyProvider>;kotlin.Int){}[0]
    final fun setDefaultProvider(dev.whyoleg.cryptography/CryptographyProvider) // dev.whyoleg.cryptography/CryptographySystem.setDefaultProvider|setDefaultProvider(dev.whyoleg.cryptography.CryptographyProvider){}[0]
    final fun setDefaultRandom(dev.whyoleg.cryptography.random/CryptographyRandom) // dev.whyoleg.cryptography/CryptographySystem.setDefaultRandom|setDefaultRandom(dev.whyoleg.cryptography.random.CryptographyRandom){}[0]
}
